
@model Sample02.Models.ViewModels.ProductCategoryViewModel

@using Kendo.Mvc.UI

@{
    ViewBag.Title = "Product Category";
    
}


    <div class="container-fluid">
        <hr />
        <h2>Product Category</h2>
        <hr />
        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken();
        <div>
            @{
                Html.RenderAction("ShowToolbar", "Partial");
            }

        </div>
          
            <div class="form-horizontal">
                <hr />
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                <div class="form-group">
                    @Html.LabelFor(model => model.CategoryCode, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.TextBoxFor(model => model.CategoryCode, new { @id = "code", htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.CategoryCode, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.CategoryName, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.TextBoxFor(model => model.CategoryName, new { @id = "name", htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.CategoryName, "", new { @class = "text-danger" })
                    </div>
                </div>

            </div>
        }
        <div class="row kendoGrid">
            @(Html.Kendo().Grid<Sample02.Models.DomainModels.DTO.EF.ProductCategory>()
                       .Name("ProductCategoryGrid")
                       .Columns(columns =>
                       {
                   
                           columns.Bound(p => p.Id).Title("شناسه");
                           columns.Bound(p => p.CategoryCode).Title(" کد گروه ");
                           columns.Bound(p => p.CategoryName).Title("نام گروه");

                       })
                       .Pageable()
                       .Navigatable()
                       .Selectable()
                       .Sortable()
                       .Scrollable()
                       .Filterable()
                       .Events(events => events.Change("OnRowSelect"))
                       .DataSource(dataSource => dataSource
                            .Ajax()  
                           .Batch(true)
                           .PageSize(20)
                           .ServerOperation(false)
                           .Model(model => model.Id(p => p.Id))
                           .Read(read => read.Action("FillGrid", "ProductCategory"))
                     )
            )

        </div>
    </div>
    <script type="text/javascript">

        var ref_ProductCategory = {};
       

            //************** Save ********************
        $("#btnSave").click(function () {

            ref_ProductCategory = {

                    CategoryCode: $('#code').val(),

                    CategoryName: $('#name').val(),
            };

                $.ajax({

                    url: "/ProductCategory/Create",
    
                    data: JSON.stringify(ref_ProductCategory),

                    type: "POST",

                    contentType: "application/json;charset=utf-8",

                    dataType: "json",

                    success: function (result) {

                        location.reload();

                    },

                    error: function (errormessage) {

                        alert(errormessage.responseText);

                    }

                });
            })
            //***
            //************** Edit ********************
        $("#btnEdit").click(function () {

            ref_ProductCategory = {

                Id: ref_ProductCategory.Id,

                CategoryCode: $('#code').val(),

                CategoryName: $('#name').val(),
            };

                $.ajax({

                    url: "/ProductCategory/Edit",

                    data: JSON.stringify(ref_ProductCategory),

                    type: "POST",

                    contentType: "application/json;charset=utf-8",

                    dataType: "json",

                    success: function (result) {

                        location.reload();

                    },

                    error: function (errormessage) {

                        alert(errormessage.responseText);

                    }

                });
            })
            //***
            //************** Delete ********************
        $("#btnDelete").click(function () {
            alert("delete");

                $.ajax({

                    url: "/ProductCategory/Delete",

                    data: JSON.stringify(ref_ProductCategory),

                    type: "POST",

                    contentType: "application/json;charset=utf-8",

                    dataType: "json",

                    success: function (result) {

                        location.reload();

                    },

                    error: function (errormessage) {

                        alert(errormessage.responseText);

                    }

                });
            })
            //***
            //************** Refresh ********************
            $("#btnRefresh").click(function () {

                location.reload();
            })
            //***
            //************** OnRowSelect ******************
            OnRowSelect = function (e) {
                var grid = $("#ProductCategoryGrid").data("kendoGrid");
                var selectedRow = this.dataItem(this.select());
                $("#code").val(selectedRow.CategoryCode);
                $("#name").val(selectedRow.CategoryName);
                ref_ProductCategory.Id = selectedRow.Id;
            }
            //***
    </script>

