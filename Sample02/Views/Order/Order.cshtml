
@model Sample02.Models.ViewModels.OrderViewModel

@using Kendo.Mvc.UI

@{
    ViewBag.Title = "Order";
    ViewBag.HeaderName = "Order";

}




@using (Html.BeginForm())
{
    @Html.AntiForgeryToken();
    <div class="form-horizontal">
        @{
            Html.RenderAction("ShowToolbar", "Partial");
        }

    </div>

    <div class="form-horizontal border rounded p-2">
        <h4>Order Information</h4>

        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="form-group">
            @Html.LabelFor(model => model.OrderCode, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.OrderCode, new { @id = "code", htmlAttributes = new { @class = "form-control col-md-2" } })
                @Html.ValidationMessageFor(model => model.OrderCode, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.OrderDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @(Html.Kendo().DatePicker()
                                      .Name("date")
                                      .Min(new DateTime(1900, 1, 1))
                                      .Max(new DateTime(2099, 12, 31))
                                      .Value(DateTime.Today) //Set the value of the DatePicker.
                )
                @Html.ValidationMessageFor(model => model.OrderDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Customer_Ref, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.Customer_Ref, new { @id = "customer_ref", htmlAttributes = new { @class = "form-control col-md-2" } })
                @*@Html.DropDownListFor(model => model.Customer_Ref, new SelectList(
                 Model.FillGrid(),
                 "Id",
                 "CustomerName",
                 Model.Customer_Ref
                 ),
                htmlAttributes: new {@id="customerList", @class = "form-control col-md-3", @onChange = "SelectedValue(this)" }
                 )*@
                @Html.ValidationMessageFor(model => model.Customer_Ref, "", new { @class = "text-danger" })
            </div>
        </div>

    </div>
    <br />
    <div class="form-horizontal border rounded p-2">
        <h4>Order Items</h4>
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="form-group">
            @Html.LabelFor(model => model.OrderDetail_Ref.UnitPrice, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.OrderDetail_Ref.UnitPrice, new { @id = "unitPrice", htmlAttributes = new { @class = "form-control col-md-2" } })
                @Html.ValidationMessageFor(model => model.OrderDetail_Ref.UnitPrice, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.OrderDetail_Ref.Discount, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.OrderDetail_Ref.Discount, new { @id = "discount", htmlAttributes = new { @class = "form-control col-md-2" } })
                @Html.ValidationMessageFor(model => model.OrderDetail_Ref.Discount, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.OrderDetail_Ref.TaxRate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.OrderDetail_Ref.TaxRate, new { @id = "taxRate", htmlAttributes = new { @class = "form-control col-md-2" } })
                @Html.ValidationMessageFor(model => model.OrderDetail_Ref.TaxRate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.OrderDetail_Ref.Quantity, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.OrderDetail_Ref.Quantity, new { @id = "quantity", htmlAttributes = new { @class = "form-control col-md-2" } })

                @Html.ValidationMessageFor(model => model.OrderDetail_Ref.Quantity, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.OrderDetail_Ref.Product_Ref, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.OrderDetail_Ref.Product_Ref, new { @id = "product_ref", htmlAttributes = new { @class = "form-control col-md-2" } })

                @Html.ValidationMessageFor(model => model.OrderDetail_Ref.Product_Ref, "", new { @class = "text-danger" })
            </div>
        </div>

        <div>
            <input class="btn btn-outline-info " type="button" name="addButton" id="btnAdd" value="Add to list" />
        </div>

    </div>



}

<br />
<div class="row kendoGrid">
    @(Html.Kendo().Grid<Sample02.Models.DomainModels.DTO.EF.usp_OrderMaster_Select_Result>()
                                               .Name("OrderGrid")
                                               .Columns(columns =>
                                               {

                                                   columns.Bound(p => p.Id).Title("شناسه");
                                                   columns.Bound(p => p.OrderCode).Title("Order Code");
                                                   columns.Bound(p => p.OrderDate).Title("Order Date");
                                                   columns.Bound(p => p.Customer_Ref).Title("Customer ID");
                                                   columns.Bound(p => p.CustomerCode).Title("Customer Code");



                                               })
                                               .Pageable()
                                               .Navigatable()
                                               .Selectable()
                                               .Sortable()
                                               .Scrollable()
                                               .Filterable()
                                               .Events(events => events.Change("OnRowSelect"))
                                               .DataSource(dataSource => dataSource
                                                    .Ajax()
                                                   .Batch(true)
                                                   .PageSize(20)
                                                   .ServerOperation(false)
                                                   .Model(model => model.Id(order => order.Id))
                                                   .Read(read => read.Action("FillGrid", "Order"))
                                             )
    )

</div>

<div class="row kendoGrid">
    @(Html.Kendo().Grid<Sample02.Models.DomainModels.DTO.Helper.OrderHelper>()
                    .Name("OrderDetailsGrid")
    )

</div>

<script type="text/javascript">

    var ref_Order = {};
    var selectedCustomer_RefID = 0;
    //var orderDetails =

    //    [
    //        { UnitPrice: 3, Discount: 89, TaxRate: 90, Quantity: 8, Product_Ref: 18 },
    //        { UnitPrice: 3, Discount: 89, TaxRate: 90, Quantity: 8, Product_Ref: 18 },
    //    ];
    //$(document).ready(function () {
    //    $("#date").datepicker({ dateFormat: 'dd/mm/yy' });
    //});

    var orderDetails = [];

    $("#btnAdd").click(function () {

        orderDetails.push({
            UnitPrice: parseFloat($('#unitPrice').val().trim()),
            Discount: parseFloat($('#discount').val().trim()),
            TaxRate: parseFloat($('#taxRate').val().trim()),
            Quantity: parseInt($('#quantity').val().trim()),
            Product_Ref: parseInt($('#product_ref').val().trim())
        });

        //Clear fields
        $('#unitPrice').val('').focus();
        $('#discount,#taxRate,#quantity,#product_ref').val('');
    });

    //************** Save ********************
    $("#btnSave").click(function () {
        //alert(orderDetails[1].UnitPrice);
        // var orderDetailsGrid = $("#OrderDetailsGrid").data("kendoGrid").dataSource.data;

        //  alert(JSON.stringify({ griditems: orderDetailsGrid.dataSource.view() }));


        // var dataToSend = [{ fieldname: 'ABC' }, { fieldname: 'DEF' }];
        //var orderDetails1 = JSON.stringify(orderDetails);

        var datetimepicker = $("#date").kendoDatePicker({
            value: new Date(),
            min: new Date(2019, 0, 1),
            max: new Date()
        });

        //ref_Order = {

        //    OrderCode: $('#code').val(),

        //    OrderDate: datetimepicker,

        //    Customer_Ref: $('#customer_ref').val(),


        //};

        //var  ref_Order1 = JSON.stringify(ref_Order );
        // var orderDetails1 = JSON.stringify( orderDetails );

        var data = {
            OrderCode: $('#code').val(),

            OrderDate: datetimepicker,

            Customer_Ref: $('#customer_ref').val(),

            OrderDetails: orderDetails
        }

        

        $.ajax({
            url: '/Order/Create',
            type: "POST",
            data: JSON.stringify(data),
            dataType: "JSON",
            contentType: "application/json",
            success: function (d) {
                //check is successfully save to database 
                if (d.status == true) {
                    //will send status from server side
                    alert('Successfully done.');
                    //clear form
                    orderDetails = [];
                    $('#code').val('');
                    $('#date').val('');
                    $('#customer_ref').val('');
                }
                else {
                    alert('Failed');
                }
                //$('#submit').val('Save');
            },
            error: function () {
                alert('Error. Please try again.');
               // $('#submit').val('Save');
            }
        });

    });

    //************** Delete ********************
    $("#btnDelete").click(function () {

        var answer = confirm("Are you sure you want to delete this Record?");

        if (answer) {

            $.ajax({

                url: "/Order/Delete/" + ref_Order.Id,

                type: "POST",

                contentType: "application/json;charset=utf-8",

                dataType: "json",

                success: function (result) {

                    alert("Delete is done!");

                },

                error: function (errormessage) {



                }

            });
        }
    })

    OnRowSelect = function (e) {
        var grid = $("#OrderGrid").data("kendoGrid");
        var selectedRow = this.dataItem(this.select());
        $("#code").val(selectedRow.OrderCode);
        $("#date").val(selectedRow.OrderDate);
        $("#customer_ref").val(selectedRow.Customer_Ref);
        ref_Order.Id = selectedRow.Id;



        // OrderDetailsGrid
        //var orderDetails = [
        //    {  UnitPrice: 3, Discount: 89, TaxRate: 90, Quantity: 8, Product_Ref: 18,  }
        //    , {  UnitPrice: 6, Discount: 99, TaxRate: 88, Quantity: 9, Product_Ref: 18 }
        //];


        //$('#OrderDetailsGrid').kendoGrid({
        //    scrollable: true,
        //    sortable: true,
        //    pageable: true,
        //    selectable: "row",
        //    filterable: true
        //    , columns:
        //        [

        //            { field: "UnitPrice", title: "UnitPrice" }
        //            , { field: "Discount", title: "Discount" }
        //            , { field: "TaxRate", title: "TaxRate" }
        //            , { field: "Quantity", title: "Quantity" }
        //            , { field: "Product_Ref", title: "Product_Ref" }


        //            ]
        //    , dataSource: { data: orderDetails, pageSize: 10 } //binding JSON data with grid

        //});

    }
    //***
    //OnComboBoxSelect = function (e) {
    //    var comboBox = $('#customerList').data("kendoComboBox");
    //    var selectedItem = this.dataItem(this.select());
    //    ref_Order.Customer_Ref = selectedItem.Id;
    //}

    //function SelectedValue(ddlObject) {

    //    var selectedValue = ddlObject.value;
    //    var selectedText = ddlObject.options[ddlObject.selectedIndex].innerHTML;
    //    ref_Order.Customer_Ref = selectedValue;
    //    selectedCustomer_RefID  = selectedValue;
    //    alert(selectedCustomer_RefID );
    //}


</script>